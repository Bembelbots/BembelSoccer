# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SettingsData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SettingsData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSettingsData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SettingsData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SettingsData
    def RobotName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SettingsData
    def LanAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SettingsData
    def LanLink(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SettingsData
    def WlanAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SettingsData
    def WlanEssid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SettingsData
    def WlanSignalStrength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SettingsData
    def BatteryCharge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SettingsData
    def BatteryCharging(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SettingsData
    def BackendRunning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SettingsData
    def FrontendRunning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SettingsData
    def FailState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SettingsData
    def Configuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SettingsData
    def Calibration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SettingsData
    def Webots(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SettingsData
    def Joints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = o + self._tab.Pos
            from Joints import Joints
            obj = Joints()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SettingsData
    def BuildInfoFrontend(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SettingsData
    def BuildInfoBackend(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SettingsDataStart(builder):
    builder.StartObject(17)

def Start(builder):
    SettingsDataStart(builder)

def SettingsDataAddRobotName(builder, robotName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(robotName), 0)

def AddRobotName(builder, robotName):
    SettingsDataAddRobotName(builder, robotName)

def SettingsDataAddLanAddress(builder, lanAddress):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lanAddress), 0)

def AddLanAddress(builder, lanAddress):
    SettingsDataAddLanAddress(builder, lanAddress)

def SettingsDataAddLanLink(builder, lanLink):
    builder.PrependBoolSlot(2, lanLink, 0)

def AddLanLink(builder, lanLink):
    SettingsDataAddLanLink(builder, lanLink)

def SettingsDataAddWlanAddress(builder, wlanAddress):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(wlanAddress), 0)

def AddWlanAddress(builder, wlanAddress):
    SettingsDataAddWlanAddress(builder, wlanAddress)

def SettingsDataAddWlanEssid(builder, wlanEssid):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(wlanEssid), 0)

def AddWlanEssid(builder, wlanEssid):
    SettingsDataAddWlanEssid(builder, wlanEssid)

def SettingsDataAddWlanSignalStrength(builder, wlanSignalStrength):
    builder.PrependInt32Slot(5, wlanSignalStrength, 0)

def AddWlanSignalStrength(builder, wlanSignalStrength):
    SettingsDataAddWlanSignalStrength(builder, wlanSignalStrength)

def SettingsDataAddBatteryCharge(builder, batteryCharge):
    builder.PrependFloat32Slot(6, batteryCharge, 0.0)

def AddBatteryCharge(builder, batteryCharge):
    SettingsDataAddBatteryCharge(builder, batteryCharge)

def SettingsDataAddBatteryCharging(builder, batteryCharging):
    builder.PrependBoolSlot(7, batteryCharging, 0)

def AddBatteryCharging(builder, batteryCharging):
    SettingsDataAddBatteryCharging(builder, batteryCharging)

def SettingsDataAddBackendRunning(builder, backendRunning):
    builder.PrependBoolSlot(8, backendRunning, 0)

def AddBackendRunning(builder, backendRunning):
    SettingsDataAddBackendRunning(builder, backendRunning)

def SettingsDataAddFrontendRunning(builder, frontendRunning):
    builder.PrependBoolSlot(9, frontendRunning, 0)

def AddFrontendRunning(builder, frontendRunning):
    SettingsDataAddFrontendRunning(builder, frontendRunning)

def SettingsDataAddFailState(builder, failState):
    builder.PrependInt32Slot(10, failState, 0)

def AddFailState(builder, failState):
    SettingsDataAddFailState(builder, failState)

def SettingsDataAddConfiguration(builder, configuration):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(configuration), 0)

def AddConfiguration(builder, configuration):
    SettingsDataAddConfiguration(builder, configuration)

def SettingsDataAddCalibration(builder, calibration):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(calibration), 0)

def AddCalibration(builder, calibration):
    SettingsDataAddCalibration(builder, calibration)

def SettingsDataAddWebots(builder, webots):
    builder.PrependBoolSlot(13, webots, 0)

def AddWebots(builder, webots):
    SettingsDataAddWebots(builder, webots)

def SettingsDataAddJoints(builder, joints):
    builder.PrependStructSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(joints), 0)

def AddJoints(builder, joints):
    SettingsDataAddJoints(builder, joints)

def SettingsDataAddBuildInfoFrontend(builder, buildInfoFrontend):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(buildInfoFrontend), 0)

def AddBuildInfoFrontend(builder, buildInfoFrontend):
    SettingsDataAddBuildInfoFrontend(builder, buildInfoFrontend)

def SettingsDataAddBuildInfoBackend(builder, buildInfoBackend):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(buildInfoBackend), 0)

def AddBuildInfoBackend(builder, buildInfoBackend):
    SettingsDataAddBuildInfoBackend(builder, buildInfoBackend)

def SettingsDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return SettingsDataEnd(builder)

import Joints
try:
    from typing import Optional
except:
    pass

class SettingsDataT(object):

    # SettingsDataT
    def __init__(self):
        self.robotName = None  # type: str
        self.lanAddress = None  # type: str
        self.lanLink = False  # type: bool
        self.wlanAddress = None  # type: str
        self.wlanEssid = None  # type: str
        self.wlanSignalStrength = 0  # type: int
        self.batteryCharge = 0.0  # type: float
        self.batteryCharging = False  # type: bool
        self.backendRunning = False  # type: bool
        self.frontendRunning = False  # type: bool
        self.failState = 0  # type: int
        self.configuration = None  # type: str
        self.calibration = None  # type: str
        self.webots = False  # type: bool
        self.joints = None  # type: Optional[Joints.JointsT]
        self.buildInfoFrontend = None  # type: str
        self.buildInfoBackend = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        settingsData = SettingsData()
        settingsData.Init(buf, pos)
        return cls.InitFromObj(settingsData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, settingsData):
        x = SettingsDataT()
        x._UnPack(settingsData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.robotName == other.robotName and \
            self.lanAddress == other.lanAddress and \
            self.lanLink == other.lanLink and \
            self.wlanAddress == other.wlanAddress and \
            self.wlanEssid == other.wlanEssid and \
            self.wlanSignalStrength == other.wlanSignalStrength and \
            self.batteryCharge == other.batteryCharge and \
            self.batteryCharging == other.batteryCharging and \
            self.backendRunning == other.backendRunning and \
            self.frontendRunning == other.frontendRunning and \
            self.failState == other.failState and \
            self.configuration == other.configuration and \
            self.calibration == other.calibration and \
            self.webots == other.webots and \
            self.joints == other.joints and \
            self.buildInfoFrontend == other.buildInfoFrontend and \
            self.buildInfoBackend == other.buildInfoBackend

    # SettingsDataT
    def _UnPack(self, settingsData):
        if settingsData is None:
            return
        self.robotName = settingsData.RobotName()
        self.lanAddress = settingsData.LanAddress()
        self.lanLink = settingsData.LanLink()
        self.wlanAddress = settingsData.WlanAddress()
        self.wlanEssid = settingsData.WlanEssid()
        self.wlanSignalStrength = settingsData.WlanSignalStrength()
        self.batteryCharge = settingsData.BatteryCharge()
        self.batteryCharging = settingsData.BatteryCharging()
        self.backendRunning = settingsData.BackendRunning()
        self.frontendRunning = settingsData.FrontendRunning()
        self.failState = settingsData.FailState()
        self.configuration = settingsData.Configuration()
        self.calibration = settingsData.Calibration()
        self.webots = settingsData.Webots()
        if settingsData.Joints() is not None:
            self.joints = Joints.JointsT.InitFromObj(settingsData.Joints())
        self.buildInfoFrontend = settingsData.BuildInfoFrontend()
        self.buildInfoBackend = settingsData.BuildInfoBackend()

    # SettingsDataT
    def Pack(self, builder):
        if self.robotName is not None:
            robotName = builder.CreateString(self.robotName)
        if self.lanAddress is not None:
            lanAddress = builder.CreateString(self.lanAddress)
        if self.wlanAddress is not None:
            wlanAddress = builder.CreateString(self.wlanAddress)
        if self.wlanEssid is not None:
            wlanEssid = builder.CreateString(self.wlanEssid)
        if self.configuration is not None:
            configuration = builder.CreateString(self.configuration)
        if self.calibration is not None:
            calibration = builder.CreateString(self.calibration)
        if self.buildInfoFrontend is not None:
            buildInfoFrontend = builder.CreateString(self.buildInfoFrontend)
        if self.buildInfoBackend is not None:
            buildInfoBackend = builder.CreateString(self.buildInfoBackend)
        SettingsDataStart(builder)
        if self.robotName is not None:
            SettingsDataAddRobotName(builder, robotName)
        if self.lanAddress is not None:
            SettingsDataAddLanAddress(builder, lanAddress)
        SettingsDataAddLanLink(builder, self.lanLink)
        if self.wlanAddress is not None:
            SettingsDataAddWlanAddress(builder, wlanAddress)
        if self.wlanEssid is not None:
            SettingsDataAddWlanEssid(builder, wlanEssid)
        SettingsDataAddWlanSignalStrength(builder, self.wlanSignalStrength)
        SettingsDataAddBatteryCharge(builder, self.batteryCharge)
        SettingsDataAddBatteryCharging(builder, self.batteryCharging)
        SettingsDataAddBackendRunning(builder, self.backendRunning)
        SettingsDataAddFrontendRunning(builder, self.frontendRunning)
        SettingsDataAddFailState(builder, self.failState)
        if self.configuration is not None:
            SettingsDataAddConfiguration(builder, configuration)
        if self.calibration is not None:
            SettingsDataAddCalibration(builder, calibration)
        SettingsDataAddWebots(builder, self.webots)
        if self.joints is not None:
            joints = self.joints.Pack(builder)
            SettingsDataAddJoints(builder, joints)
        if self.buildInfoFrontend is not None:
            SettingsDataAddBuildInfoFrontend(builder, buildInfoFrontend)
        if self.buildInfoBackend is not None:
            SettingsDataAddBuildInfoBackend(builder, buildInfoBackend)
        settingsData = SettingsDataEnd(builder)
        return settingsData
