# automatically generated by the FlatBuffers compiler, do not modify

# namespace: bbapi

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class pos(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 4

    # pos
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # pos
    def X(self): return self._tab.Get(flatbuffers.number_types.Int16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # pos
    def Y(self): return self._tab.Get(flatbuffers.number_types.Int16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))

def Createpos(builder, x, y):
    builder.Prep(2, 4)
    builder.PrependInt16(y)
    builder.PrependInt16(x)
    return builder.Offset()


class posT(object):

    # posT
    def __init__(self):
        self.x = 0  # type: int
        self.y = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pos = pos()
        pos.Init(buf, pos)
        return cls.InitFromObj(pos)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, pos):
        x = posT()
        x._UnPack(pos)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.x == other.x and \
            self.y == other.y

    # posT
    def _UnPack(self, pos):
        if pos is None:
            return
        self.x = pos.X()
        self.y = pos.Y()

    # posT
    def Pack(self, builder):
        return CreatePos(builder, self.x, self.y)
