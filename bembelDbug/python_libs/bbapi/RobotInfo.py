# automatically generated by the FlatBuffers compiler, do not modify

# namespace: bbapi

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RobotInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RobotInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRobotInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RobotInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RobotInfo
    def Penalty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RobotInfo
    def SecsUntilUnpenalized(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def RobotInfoStart(builder):
    builder.StartObject(2)

def Start(builder):
    RobotInfoStart(builder)

def RobotInfoAddPenalty(builder, penalty):
    builder.PrependUint8Slot(0, penalty, 0)

def AddPenalty(builder, penalty):
    RobotInfoAddPenalty(builder, penalty)

def RobotInfoAddSecsUntilUnpenalized(builder, secsUntilUnpenalized):
    builder.PrependUint8Slot(1, secsUntilUnpenalized, 0)

def AddSecsUntilUnpenalized(builder, secsUntilUnpenalized):
    RobotInfoAddSecsUntilUnpenalized(builder, secsUntilUnpenalized)

def RobotInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return RobotInfoEnd(builder)


class RobotInfoT(object):

    # RobotInfoT
    def __init__(self):
        self.penalty = 0  # type: int
        self.secsUntilUnpenalized = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        robotInfo = RobotInfo()
        robotInfo.Init(buf, pos)
        return cls.InitFromObj(robotInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, robotInfo):
        x = RobotInfoT()
        x._UnPack(robotInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.penalty == other.penalty and \
            self.secsUntilUnpenalized == other.secsUntilUnpenalized

    # RobotInfoT
    def _UnPack(self, robotInfo):
        if robotInfo is None:
            return
        self.penalty = robotInfo.Penalty()
        self.secsUntilUnpenalized = robotInfo.SecsUntilUnpenalized()

    # RobotInfoT
    def Pack(self, builder):
        RobotInfoStart(builder)
        RobotInfoAddPenalty(builder, self.penalty)
        RobotInfoAddSecsUntilUnpenalized(builder, self.secsUntilUnpenalized)
        robotInfo = RobotInfoEnd(builder)
        return robotInfo
