# automatically generated by the FlatBuffers compiler, do not modify

# namespace: bbapi

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class dpos(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 6

    # dpos
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dpos
    def X(self): return self._tab.Get(flatbuffers.number_types.Int16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # dpos
    def Y(self): return self._tab.Get(flatbuffers.number_types.Int16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))
    # dpos
    def A(self): return self._tab.Get(flatbuffers.number_types.Int16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def Createdpos(builder, x, y, a):
    builder.Prep(2, 6)
    builder.PrependInt16(a)
    builder.PrependInt16(y)
    builder.PrependInt16(x)
    return builder.Offset()


class dposT(object):

    # dposT
    def __init__(self):
        self.x = 0  # type: int
        self.y = 0  # type: int
        self.a = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dpos = dpos()
        dpos.Init(buf, pos)
        return cls.InitFromObj(dpos)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dpos):
        x = dposT()
        x._UnPack(dpos)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.x == other.x and \
            self.y == other.y and \
            self.a == other.a

    # dposT
    def _UnPack(self, dpos):
        if dpos is None:
            return
        self.x = dpos.X()
        self.y = dpos.Y()
        self.a = dpos.A()

    # dposT
    def Pack(self, builder):
        return CreateDpos(builder, self.x, self.y, self.a)
