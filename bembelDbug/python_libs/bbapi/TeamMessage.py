# automatically generated by the FlatBuffers compiler, do not modify

# namespace: bbapi

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TeamMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TeamMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTeamMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TeamMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TeamMessage
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TeamMessage
    def PlayerNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TeamMessage
    def Battery(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # TeamMessage
    def Role(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TeamMessage
    def Fallen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TeamMessage
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from bbapi.dpos import dpos
            obj = dpos()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TeamMessage
    def PosConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TeamMessage
    def Ball(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = o + self._tab.Pos
            from bbapi.pos import pos
            obj = pos()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TeamMessage
    def BallAge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TeamMessage
    def BallConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TeamMessage
    def TeamBall(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = o + self._tab.Pos
            from bbapi.pos import pos
            obj = pos()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TeamMessage
    def TeamBallConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TeamMessage
    def IsNearestToBall(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TeamMessage
    def Walktarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = o + self._tab.Pos
            from bbapi.dpos import dpos
            obj = dpos()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TeamMessage
    def Goaltarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = o + self._tab.Pos
            from bbapi.pos import pos
            obj = pos()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TeamMessage
    def Obstacles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            from bbapi.pos import pos
            obj = pos()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TeamMessage
    def ObstaclesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TeamMessage
    def ObstaclesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # TeamMessage
    def RefereeGestureUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def TeamMessageStart(builder):
    builder.StartObject(17)

def Start(builder):
    TeamMessageStart(builder)

def TeamMessageAddName(builder, name):
    builder.PrependUint8Slot(0, name, 0)

def AddName(builder, name):
    TeamMessageAddName(builder, name)

def TeamMessageAddPlayerNum(builder, playerNum):
    builder.PrependUint8Slot(1, playerNum, 0)

def AddPlayerNum(builder, playerNum):
    TeamMessageAddPlayerNum(builder, playerNum)

def TeamMessageAddBattery(builder, battery):
    builder.PrependInt8Slot(2, battery, 0)

def AddBattery(builder, battery):
    TeamMessageAddBattery(builder, battery)

def TeamMessageAddRole(builder, role):
    builder.PrependUint8Slot(3, role, 0)

def AddRole(builder, role):
    TeamMessageAddRole(builder, role)

def TeamMessageAddFallen(builder, fallen):
    builder.PrependBoolSlot(4, fallen, 0)

def AddFallen(builder, fallen):
    TeamMessageAddFallen(builder, fallen)

def TeamMessageAddPosition(builder, position):
    builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    TeamMessageAddPosition(builder, position)

def TeamMessageAddPosConf(builder, posConf):
    builder.PrependUint8Slot(6, posConf, 0)

def AddPosConf(builder, posConf):
    TeamMessageAddPosConf(builder, posConf)

def TeamMessageAddBall(builder, ball):
    builder.PrependStructSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ball), 0)

def AddBall(builder, ball):
    TeamMessageAddBall(builder, ball)

def TeamMessageAddBallAge(builder, ballAge):
    builder.PrependInt32Slot(8, ballAge, 0)

def AddBallAge(builder, ballAge):
    TeamMessageAddBallAge(builder, ballAge)

def TeamMessageAddBallConf(builder, ballConf):
    builder.PrependUint8Slot(9, ballConf, 0)

def AddBallConf(builder, ballConf):
    TeamMessageAddBallConf(builder, ballConf)

def TeamMessageAddTeamBall(builder, teamBall):
    builder.PrependStructSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(teamBall), 0)

def AddTeamBall(builder, teamBall):
    TeamMessageAddTeamBall(builder, teamBall)

def TeamMessageAddTeamBallConf(builder, teamBallConf):
    builder.PrependUint8Slot(11, teamBallConf, 0)

def AddTeamBallConf(builder, teamBallConf):
    TeamMessageAddTeamBallConf(builder, teamBallConf)

def TeamMessageAddIsNearestToBall(builder, isNearestToBall):
    builder.PrependBoolSlot(12, isNearestToBall, 0)

def AddIsNearestToBall(builder, isNearestToBall):
    TeamMessageAddIsNearestToBall(builder, isNearestToBall)

def TeamMessageAddWalktarget(builder, walktarget):
    builder.PrependStructSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(walktarget), 0)

def AddWalktarget(builder, walktarget):
    TeamMessageAddWalktarget(builder, walktarget)

def TeamMessageAddGoaltarget(builder, goaltarget):
    builder.PrependStructSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(goaltarget), 0)

def AddGoaltarget(builder, goaltarget):
    TeamMessageAddGoaltarget(builder, goaltarget)

def TeamMessageAddObstacles(builder, obstacles):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(obstacles), 0)

def AddObstacles(builder, obstacles):
    TeamMessageAddObstacles(builder, obstacles)

def TeamMessageStartObstaclesVector(builder, numElems):
    return builder.StartVector(4, numElems, 2)

def StartObstaclesVector(builder, numElems: int) -> int:
    return TeamMessageStartObstaclesVector(builder, numElems)

def TeamMessageAddRefereeGestureUp(builder, refereeGestureUp):
    builder.PrependBoolSlot(16, refereeGestureUp, 0)

def AddRefereeGestureUp(builder, refereeGestureUp):
    TeamMessageAddRefereeGestureUp(builder, refereeGestureUp)

def TeamMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return TeamMessageEnd(builder)

import bbapi.dpos
import bbapi.pos
try:
    from typing import List, Optional
except:
    pass

class TeamMessageT(object):

    # TeamMessageT
    def __init__(self):
        self.name = 0  # type: int
        self.playerNum = 0  # type: int
        self.battery = 0  # type: int
        self.role = 0  # type: int
        self.fallen = False  # type: bool
        self.position = None  # type: Optional[bbapi.dpos.dposT]
        self.posConf = 0  # type: int
        self.ball = None  # type: Optional[bbapi.pos.posT]
        self.ballAge = 0  # type: int
        self.ballConf = 0  # type: int
        self.teamBall = None  # type: Optional[bbapi.pos.posT]
        self.teamBallConf = 0  # type: int
        self.isNearestToBall = False  # type: bool
        self.walktarget = None  # type: Optional[bbapi.dpos.dposT]
        self.goaltarget = None  # type: Optional[bbapi.pos.posT]
        self.obstacles = None  # type: List[bbapi.pos.posT]
        self.refereeGestureUp = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        teamMessage = TeamMessage()
        teamMessage.Init(buf, pos)
        return cls.InitFromObj(teamMessage)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, teamMessage):
        x = TeamMessageT()
        x._UnPack(teamMessage)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.playerNum == other.playerNum and \
            self.battery == other.battery and \
            self.role == other.role and \
            self.fallen == other.fallen and \
            self.position == other.position and \
            self.posConf == other.posConf and \
            self.ball == other.ball and \
            self.ballAge == other.ballAge and \
            self.ballConf == other.ballConf and \
            self.teamBall == other.teamBall and \
            self.teamBallConf == other.teamBallConf and \
            self.isNearestToBall == other.isNearestToBall and \
            self.walktarget == other.walktarget and \
            self.goaltarget == other.goaltarget and \
            self.obstacles == other.obstacles and \
            self.refereeGestureUp == other.refereeGestureUp

    # TeamMessageT
    def _UnPack(self, teamMessage):
        if teamMessage is None:
            return
        self.name = teamMessage.Name()
        self.playerNum = teamMessage.PlayerNum()
        self.battery = teamMessage.Battery()
        self.role = teamMessage.Role()
        self.fallen = teamMessage.Fallen()
        if teamMessage.Position() is not None:
            self.position = bbapi.dpos.dposT.InitFromObj(teamMessage.Position())
        self.posConf = teamMessage.PosConf()
        if teamMessage.Ball() is not None:
            self.ball = bbapi.pos.posT.InitFromObj(teamMessage.Ball())
        self.ballAge = teamMessage.BallAge()
        self.ballConf = teamMessage.BallConf()
        if teamMessage.TeamBall() is not None:
            self.teamBall = bbapi.pos.posT.InitFromObj(teamMessage.TeamBall())
        self.teamBallConf = teamMessage.TeamBallConf()
        self.isNearestToBall = teamMessage.IsNearestToBall()
        if teamMessage.Walktarget() is not None:
            self.walktarget = bbapi.dpos.dposT.InitFromObj(teamMessage.Walktarget())
        if teamMessage.Goaltarget() is not None:
            self.goaltarget = bbapi.pos.posT.InitFromObj(teamMessage.Goaltarget())
        if not teamMessage.ObstaclesIsNone():
            self.obstacles = []
            for i in range(teamMessage.ObstaclesLength()):
                if teamMessage.Obstacles(i) is None:
                    self.obstacles.append(None)
                else:
                    pos_ = bbapi.pos.posT.InitFromObj(teamMessage.Obstacles(i))
                    self.obstacles.append(pos_)
        self.refereeGestureUp = teamMessage.RefereeGestureUp()

    # TeamMessageT
    def Pack(self, builder):
        if self.obstacles is not None:
            TeamMessageStartObstaclesVector(builder, len(self.obstacles))
            for i in reversed(range(len(self.obstacles))):
                self.obstacles[i].Pack(builder)
            obstacles = builder.EndVector()
        TeamMessageStart(builder)
        TeamMessageAddName(builder, self.name)
        TeamMessageAddPlayerNum(builder, self.playerNum)
        TeamMessageAddBattery(builder, self.battery)
        TeamMessageAddRole(builder, self.role)
        TeamMessageAddFallen(builder, self.fallen)
        if self.position is not None:
            position = self.position.Pack(builder)
            TeamMessageAddPosition(builder, position)
        TeamMessageAddPosConf(builder, self.posConf)
        if self.ball is not None:
            ball = self.ball.Pack(builder)
            TeamMessageAddBall(builder, ball)
        TeamMessageAddBallAge(builder, self.ballAge)
        TeamMessageAddBallConf(builder, self.ballConf)
        if self.teamBall is not None:
            teamBall = self.teamBall.Pack(builder)
            TeamMessageAddTeamBall(builder, teamBall)
        TeamMessageAddTeamBallConf(builder, self.teamBallConf)
        TeamMessageAddIsNearestToBall(builder, self.isNearestToBall)
        if self.walktarget is not None:
            walktarget = self.walktarget.Pack(builder)
            TeamMessageAddWalktarget(builder, walktarget)
        if self.goaltarget is not None:
            goaltarget = self.goaltarget.Pack(builder)
            TeamMessageAddGoaltarget(builder, goaltarget)
        if self.obstacles is not None:
            TeamMessageAddObstacles(builder, obstacles)
        TeamMessageAddRefereeGestureUp(builder, self.refereeGestureUp)
        teamMessage = TeamMessageEnd(builder)
        return teamMessage
